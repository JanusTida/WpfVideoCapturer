<UserControl
            xmlns:dialogs="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
            xmlns:system="clr-namespace:System;assembly=mscorlib"
            xmlns:metros="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
            xmlns:viewmodels="clr-namespace:CDFCVideoExactor.ViewModels"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:CDFCVideoExactor.Controls"
            xmlns:controls="clr-namespace:CDFCVideoExactor.Controls"
     xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:cvts="clr-namespace:CDFCConverters.Converters.VideoItemListViewerPage;assembly=CDFCConverters"
            xmlns:publicCvts="clr-namespace:CDFCConverters.Converters;assembly=CDFCConverters"
             xmlns:Custom="http://metro.mahapps.com/winfx/xaml/controls" 
            xmlns:Custom1="http://metro.mahapps.com/winfx/xaml/shared" x:Class="CDFCVideoExactor.Controls.VideoItemListViewerPage"
             mc:Ignorable="d" HorizontalAlignment="Stretch"
             d:DesignHeight="700" d:DesignWidth="1440">
    <UserControl.Resources>
        <!--所需转换器-->
        <publicCvts:ByteSizeToSizeConverter x:Key="ByteSizeToSizeConverter"/>
        <publicCvts:DateNumToDateStringConverter x:Key="DateNumToDateStringConverter"/>
        <publicCvts:ByteToGBSectorConverter x:Key="ByteSizeToGBSectorConverter"/>
        <publicCvts:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <cvts:VideoIntegrityToWordConverter x:Key="VideoIntegrityToWordConverter"/>
        <cvts:VideoIntegrityToIconConverter x:Key="VideoIntegrityToIconConverter"/>
        <Style x:Key="VideoItemListDataGridStyle" TargetType="{x:Type DataGrid}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
            <Setter Property="CellStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type DataGridCell}">
                        <Setter Property="Custom:DataGridCellHelper.SelectionUnit" 
                                Value="{Binding (Custom:DataGridRowHelper.SelectionUnit), Mode=OneWay,
                            RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGridRow}}}"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                        <!--<Setter Property="BorderBrush" >
                            <Setter.Value>
                                <SolidColorBrush Color="#d5d5d5" Opacity="0.45"/>
                            </Setter.Value>
                        </Setter>-->
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type DataGridCell}">
                                    <Border x:Name="CellBackgroundBorder" HorizontalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,0,1,0"
                                            Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" 
                                                          ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" 
                                                          Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="BorderBrush" Value="Transparent" TargetName="CellBackgroundBorder"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Foreground" Value="{DynamicResource MetroDataGrid.HighlightTextBrush}"/>

                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Custom:DataGridCellHelper.IsCellOrRowHeader" Value="True"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Custom:DataGridCellHelper.IsCellOrRowHeader" Value="True"/>
                                    <Condition Property="IsKeyboardFocusWithin" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.FocusBorderBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Foreground" Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightTextBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Custom:DataGridCellHelper.IsCellOrRowHeader" Value="True"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Custom:DataGridCellHelper.IsCellOrRowHeader" Value="True"/>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsEnabled" Value="False"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Foreground" Value="{DynamicResource MetroDataGrid.HighlightTextBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Custom:DataGridCellHelper.IsCellOrRowHeader" Value="True"/>
                                    <Condition Property="IsEnabled" Value="False"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}"/>
                            </MultiTrigger>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="ColumnHeaderStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type DataGridColumnHeader}">
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="Background" Value="#161616"/>
                        <Setter Property="BorderBrush" >
                            <Setter.Value>
                                <SolidColorBrush Color="Black" Opacity="0.1"/>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Custom:ControlsHelper.ContentCharacterCasing" Value="Upper"/>
                        <Setter Property="Cursor" Value="Hand"/>
                        <Setter Property="FontFamily" Value="Microsoft YaHei"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="MinHeight" Value="21"/>
                        <Setter Property="MinWidth" Value="0"/>
                        <Setter Property="Padding" Value="0,0,0,4"/>
                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="BackgroundBorder" BorderThickness="0,0,0,1"  BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2"/>
                                        <Custom:ContentControlEx Background="Transparent" x:Name="HeaderContent" HorizontalAlignment="Center" 
                                                                             ContentCharacterCasing="{Binding (Custom:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" 
                                                                             ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{DynamicResource VideoItemListHeaderContentStyle}"/>
                                        <Path x:Name="SortArrow" Grid.Column="1" Fill="White" Height="10" Margin="0,0,8,2" RenderTransformOrigin="0.5,0.5" Stretch="Fill" Visibility="Collapsed" VerticalAlignment="Center" Width="8"/>
                                        <Thumb x:Name="PART_LeftHeaderGripper" Width="0" Background="Transparent" HorizontalAlignment="Left" HorizontalContentAlignment="Left">
                                            <Thumb.Style>
                                                <Style TargetType="{x:Type Thumb}">
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="Cursor" Value="SizeWE"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                                <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                                                                    <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Width="2"/>
                                                                </Border>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="Width" Value="0"/>
                                                </Style>
                                            </Thumb.Style>
                                        </Thumb>
                                        <Thumb x:Name="PART_RightHeaderGripper" Width="0" Grid.Column="1" HorizontalAlignment="Right" HorizontalContentAlignment="Right">
                                            <Thumb.Style>
                                                <Style TargetType="{x:Type Thumb}">
                                                    <Setter Property="Background" Value="{DynamicResource GrayBrush5}"/>
                                                    <Setter Property="Cursor" Value="SizeWE"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                                <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                                                                    <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Width="0"/>
                                                                </Border>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="Width" Value="8"/>
                                                </Style>
                                            </Thumb.Style>
                                        </Thumb>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="SortDirection"  Value="Ascending">
                                            <Setter Property="Data" TargetName="SortArrow" Value="F1M34,57L42,57 42,32.25 52,42.25 52,31.75 38,17.75 24,31.75 24,42.25 34,32.25 34,57z"/>
                                            <Setter Property="Visibility" TargetName="SortArrow" Value="Visible"/>
                                        </Trigger>
                                        <Trigger Property="SortDirection" Value="Descending">
                                            <Setter Property="Data" TargetName="SortArrow" Value="F1M42,19.0002L34,19.0002 34,43.7502 24,33.7502 24,44.2502 38,58.2502 52,44.2502 52,33.7502 42,43.7502 42,19.0002z"/>
                                            <Setter Property="Margin" TargetName="SortArrow" Value="0,0,8,0"/>
                                            <Setter Property="Visibility" TargetName="SortArrow" Value="Visible"/>
                                        </Trigger>
                                        <Trigger Property="DisplayIndex" Value="0">
                                            <Setter Property="Visibility" TargetName="PART_LeftHeaderGripper" Value="Collapsed"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="SortDirection" Value="{x:Null}"/>
                                </MultiTrigger.Conditions>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="DropLocationIndicatorStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type Separator}">
                        <Setter Property="Background" Value="{DynamicResource GrayBrush7}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Separator}">
                                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Width" Value="2"/>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="GridLinesVisibility" Value="None"/>
            <Setter Property="VerticalGridLinesBrush" Value="Gainsboro"/>
            <Setter Property="HeadersVisibility" Value="Column"/>
            <Setter Property="MinRowHeight" Value="20"/>
            <Setter Property="RowHeaderStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type DataGridRowHeader}">
                        <Setter Property="Background" Value="Black"/>
                        <Setter Property="BorderBrush" Value="#E2E2E2"/>
                        <Setter Property="BorderThickness" Value="0,0,1,0"/>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                                    <Grid>
                                        <Border BorderBrush="Black" CornerRadius="6" BorderThickness="10" Background="{TemplateBinding Background}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                            <StackPanel Orientation="Horizontal">
                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                <Control SnapsToDevicePixels="False" Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGridRow}}}">
                                                    <Control.Visibility>
                                                        <Binding Path="(Validation.HasError)" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGridRow}}">
                                                            <Binding.Converter>
                                                                <BooleanToVisibilityConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Control.Visibility>
                                                </Control>
                                            </StackPanel>
                                        </Border>
                                        <Thumb x:Name="PART_TopHeaderGripper" Background="Transparent" VerticalAlignment="Top" VerticalContentAlignment="Top">
                                            <Thumb.Style>
                                                <Style TargetType="{x:Type Thumb}">
                                                    <Setter Property="Background" Value="{DynamicResource GrayBrush5}"/>
                                                    <Setter Property="Cursor" Value="SizeNS"/>
                                                    <Setter Property="Height" Value="6"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                                <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                                                                    <Rectangle Fill="{TemplateBinding Background}" Height="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                                </Border>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Thumb.Style>
                                        </Thumb>
                                        <Thumb x:Name="PART_BottomHeaderGripper" VerticalAlignment="Bottom" VerticalContentAlignment="Bottom">
                                            <Thumb.Style>
                                                <Style TargetType="{x:Type Thumb}">
                                                    <Setter Property="Background" Value="{DynamicResource GrayBrush5}"/>
                                                    <Setter Property="Cursor" Value="SizeNS"/>
                                                    <Setter Property="Height" Value="6"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                                <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                                                                    <Rectangle Fill="{TemplateBinding Background}" Height="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                                </Border>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Thumb.Style>
                                        </Thumb>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource AccentColorBrush3}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="RowStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type DataGridRow}">
                        <Setter Property="Background" >
                            <Setter.Value>
                                <SolidColorBrush Color="#1c1c1c"  Opacity="0.75"/>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="IsSelected" Value="{Binding IsSelected,Mode=OneWayToSource,UpdateSourceTrigger=PropertyChanged}"/>
                        <Setter Property="Custom:DataGridRowHelper.SelectionUnit" Value="{Binding SelectionUnit, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}"/>
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
                        <Setter Property="ValidationErrorTemplate">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Grid Margin="2,0" ToolTip="{Binding DataContext.ErrorContent, RelativeSource={RelativeSource Self}}" VerticalAlignment="Center">
                                        <Path Data="M31.630585,39.233818L56.261485,14.603018C56.879785,13.984618,57.882285,13.984618,58.500685,14.603018L83.131485,39.233818C83.749885,39.852218,83.749885,40.854718,83.131485,41.473018L58.500685,66.103918C57.882385,66.722218,56.879785,66.722218,56.261485,66.103918L31.630585,41.473018C31.012285,40.854718,31.012285,39.852218,31.630585,39.233818z" Fill="{DynamicResource ControlsValidationBrush}" Height="20" Stretch="Uniform" Width="20"/>
                                        <Path Data="M53.781741,31.196677C51.544017,31.196677 49.719241,33.021453 49.719241,35.259177 49.719241,37.496901 51.544017,39.321677 53.781741,39.321677 56.019465,39.321677 57.844241,37.496901 57.844241,35.259177 57.844241,33.021453 56.019465,31.196677 53.781741,31.196677z M49.687991,9.821677L49.719241,10.352927 50.937991,29.821677 56.625491,29.821677 57.875491,9.821677 49.687991,9.821677z" Fill="{DynamicResource ValidationTextBrush}" HorizontalAlignment="Center" Height="10" Stretch="Uniform" VerticalAlignment="Center" Width="10"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Custom:DataGridRowHelper.SelectionUnit" Value="FullRow"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource MetroDataGrid.HighlightTextBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="ItemsControl.AlternationIndex" Value="1"/>
                                    <Condition Property="IsSelected" Value="False"/>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter Property="Background" >
                                        <Setter.Value>
                                            <SolidColorBrush Color="#1c1c1c" Opacity="0.7"/>
                                        </Setter.Value>
                                    </Setter>
                                </MultiTrigger.Setters>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Custom:DataGridRowHelper.SelectionUnit" Value="FullRow"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightTextBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Custom:DataGridRowHelper.SelectionUnit" Value="FullRow"/>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Custom:DataGridRowHelper.SelectionUnit" Value="FullRow"/>
                                    <Condition Property="IsEnabled" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Custom:DataGridRowHelper.SelectionUnit" Value="FullRow"/>
                                    <Condition Property="IsEnabled" Value="False"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.DisabledHighlightBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource MetroDataGrid.HighlightTextBrush}"/>
                            </MultiTrigger>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGrid}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"  Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="False">
                                <ScrollViewer.Template>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Button Command="ApplicationCommands.SelectAll" Focusable="False" Style="{DynamicResource {ComponentResourceKey ResourceId=MetroDataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}">
                                                <Button.Visibility>
                                                    <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                                                        <Binding.ConverterParameter>
                                                            <DataGridHeadersVisibility>All</DataGridHeadersVisibility>
                                                        </Binding.ConverterParameter>
                                                    </Binding>
                                                </Button.Visibility>
                                            </Button>
                                            <DataGridColumnHeadersPresenter 
                                                x:Name="PART_ColumnHeadersPresenter" Grid.Column="1">
                                                <DataGridColumnHeadersPresenter.Visibility>
                                                    <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}">
                                                        <Binding.ConverterParameter>
                                                            <DataGridHeadersVisibility>Column</DataGridHeadersVisibility>
                                                        </Binding.ConverterParameter>
                                                    </Binding>
                                                </DataGridColumnHeadersPresenter.Visibility>
                                            </DataGridColumnHeadersPresenter>
                                            <Grid Grid.ColumnSpan="2" Grid.Row="1" Background="#1c1c1c" >
                                                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}"
                                                                            CanHorizontallyScroll="False"  Grid.ColumnSpan="2" CanVerticallyScroll="False" 
                                                                            ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                                                            ContentStringFormat="{TemplateBinding ContentStringFormat}">
                                                    <ScrollContentPresenter.ContextMenu>
                                                        <ContextMenu>
                                                            <MenuItem Header="预览" Command="{Binding PreviewItemCommand}" />
                                                            <MenuItem Header="在图表中显示当前文件" Command="{Binding ShowVideoPositionCommand}"  IsChecked="{Binding SelectedRow.HasFragShown}"/>
                                                            <MenuItem Header="恢复当前行" Command="{Binding RecoverCurFileCommand}" >

                                                            </MenuItem>
                                                            <MenuItem Header="恢复选中行" Command="{Binding RecoverCheckedFilesCommand}">

                                                            </MenuItem>
                                                            <MenuItem Header="将区域置为选中状态" Command="{Binding ConfirmSelectedRowsCommand}">
                                                                <MenuItem.CommandParameter>
                                                                    <system:Boolean>True</system:Boolean>
                                                                </MenuItem.CommandParameter>
                                                            </MenuItem>
                                                            <MenuItem Header="取消区域的选中状态" Command="{Binding ConfirmSelectedRowsCommand}">
                                                                <MenuItem.CommandParameter>
                                                                    <system:Boolean>False</system:Boolean>
                                                                </MenuItem.CommandParameter>
                                                            </MenuItem>
                                                        </ContextMenu>
                                                    </ScrollContentPresenter.ContextMenu>
                                                </ScrollContentPresenter>
                                            </Grid>
                                            <ScrollBar x:Name="PART_VerticalScrollBar" ContextMenuService.IsEnabled="False"  Width="15" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{StaticResource ScrollBarStyle}">
                                                
                                            </ScrollBar>
                                            <Grid Grid.Column="1" Grid.Row="2">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGrid}}}"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollBar x:Name="PART_HorizontalScrollBar"  Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </ScrollViewer.Template>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsGrouping" Value="True">
                    <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="VideoItemListHeaderContentStyle" TargetType="{x:Type Custom:ContentControlEx}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="FontSize" Value="16px"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Custom:ContentControlEx}">
                        <Grid >
                            <ContentPresenter x:Name="PART_ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="{TemplateBinding RecognizesAccessKey}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ContentCharacterCasing" Value="Normal">
                                <Setter Property="Content" TargetName="PART_ContentPresenter" Value="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Trigger>
                            <Trigger Property="ContentCharacterCasing" Value="Upper">
                                <Setter Property="Content" TargetName="PART_ContentPresenter" Value="{Binding Content, Converter={Custom1:ToUpperConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Trigger>
                            <Trigger Property="ContentCharacterCasing" Value="Lower">
                                <Setter Property="Content" TargetName="PART_ContentPresenter" Value="{Binding Content, Converter={Custom1:ToLowerConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- CheckBox相关样式-->
        <ControlTemplate x:Key="VideoItemListViewerCheckBoxStyle" TargetType="{x:Type CheckBox}">
            <CheckBox Foreground="{TemplateBinding Foreground}" FocusVisualStyle="{TemplateBinding FocusVisualStyle}" 
                      Focusable="{TemplateBinding Focusable}" 
                      AutomationProperties.HelpText="{TemplateBinding AutomationProperties.HelpText}" 
                      HorizontalAlignment="Stretch" IsTabStop="False" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                      AutomationProperties.LabeledBy="{TemplateBinding AutomationProperties.LabeledBy}" Margin="{TemplateBinding Padding}"
                      AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}"
                      Style="{DynamicResource InnerViewItemListViewerCheckBoxStyle}" 
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                      ToolTip="{TemplateBinding ToolTip}" Uid="CheckBox_1" VerticalAlignment="Stretch">
                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Uid="ContentPresenter_1"/>
            </CheckBox>
        </ControlTemplate>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
        <Style x:Key="OptionMarkFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
        <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
        <Style x:Key="InnerViewItemListViewerCheckBoxStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="#ececec"/>
            <Setter Property="BorderBrush" >
                <Setter.Value>
                    <SolidColorBrush Color="Black" Opacity="0.3"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="checkBoxBorder" CornerRadius="2" Height="20" Width="20"
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid x:Name="markGrid">
                                    <Border CornerRadius="2" x:Name="indeterminateMark" Background="#3B99FD"  Opacity="0">

                                    </Border>

                                    <Path x:Name="optionMark" Data=" F1 M 1,11.2 L 7,18 L 18.7 2.9 17 1.4 6.7 15 2 10Z"
                                          Fill="#FFFFFF" Margin="1" Opacity="0" Stretch="None"/>
                                </Grid>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                <Setter Property="Padding" Value="4,-1,0,0"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Border}"/>

                                <Setter Property="Background" TargetName="indeterminateMark" Value="#3B99FD"/>
                                <Setter Property="BorderThickness" TargetName="checkBoxBorder" Value="0"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                                <Setter Property="Background" TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Pressed.Border}"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}"/>
                                <Setter Property="Background" TargetName="indeterminateMark" Value="#3B99FD"/>
                                <Setter Property="BorderThickness" TargetName="checkBoxBorder" Value="0"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                                <Setter Property="BorderThickness" TargetName="checkBoxBorder" Value="0"/>
                                <Setter Property="CornerRadius" TargetName="checkBoxBorder" Value="0"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>
        <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#ECF4FC" Offset="0.0"/>
            <GradientStop Color="#DCECFC" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
        <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
        <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>
        <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
        <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#161616"/>
        <Style x:Key="VideoItemListViewerTabItemTemplate" TargetType="{x:Type TabItem}">
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush">
                <Setter.Value>
                    <SolidColorBrush Color="Black" Opacity="0.1"/>
                </Setter.Value>
            </Setter>
            <Setter Property="FontSize" Value="16px"/>
            <Setter Property="MinHeight" Value="25"/>
            <Setter Property="FontFamily" Value="Microsoft YaHei"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid x:Name="templateRoot"  SnapsToDevicePixels="true">
                            <Border x:Name="mainBorder" BorderThickness="0,0,0,1"  BorderBrush="{TemplateBinding BorderBrush}" 
                                    Background="{TemplateBinding Background}" >
                                <Border x:Name="innerBorder" CornerRadius="4"
                                        Background="{StaticResource TabItem.Selected.Background}" 
                                        Opacity="0"/>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentSource="Header" 
                                              Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment,
                                RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{Binding VerticalContentAlignment,
                                RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                <!--<Setter Property="Foreground" Value="White"/>-->
                            </MultiTrigger>
                            <MultiTrigger >
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsSelected" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="0.5"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="VideoItemListViewerFinalTabItemTemplate" TargetType="{x:Type TabItem}">
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush">
                <Setter.Value>
                    <SolidColorBrush Color="Black" Opacity="0.1"/>
                </Setter.Value>
            </Setter>
            <Setter Property="FontSize" Value="16px"/>
            <Setter Property="MinHeight" Value="25"/>
            <Setter Property="FontFamily" Value="Microsoft YaHei"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid x:Name="templateRoot"  SnapsToDevicePixels="true">
                            <Border x:Name="mainBorder"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0,0,1" CornerRadius="0,6,0,0"
                                    Background="{TemplateBinding Background}" >
                                <Border x:Name="innerBorder" CornerRadius="4"
                                        BorderBrush="{StaticResource TabItem.Selected.Border}"
                                        Background="{StaticResource TabItem.Selected.Background}" 
                                        Opacity="0"/>
                            </Border>
                            <ContentPresenter x:Name="contentPresenter" ContentSource="Header" 
                                              Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment,
                                RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                              VerticalAlignment="{Binding VerticalContentAlignment,
                                RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                <Setter Property="Foreground" Value="White"/>
                            </MultiTrigger>
                            <MultiTrigger >
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsSelected" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1"/>
                                <Setter Property="Opacity" TargetName="innerBorder" Value="0.5"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="TabItem.Selected.Background2" Color="#FFFFFF"/>
        <SolidColorBrush x:Key="TabItem.Selected.Background3" Color="#FFFFFF"/>
        <Style x:Key="VideoItemListViewerTabControlStyle" TargetType="{x:Type TabControl}">
            <Setter Property="Padding" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0"/>
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                                <RowDefinition x:Name="RowDefinition1" Height="*"/>
                            </Grid.RowDefinitions>
                            <UniformGrid x:Name="headerPanel"  Background="Transparent" Grid.Column="0" Rows="1" IsItemsHost="true"  Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                            <Border  x:Name="contentPanel" Background="Transparent" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained"
                                     Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                                <ContentPresenter  x:Name="SelectedContentHost" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                   ContentSource="SelectedContent" 
                                                   Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TabStripPlacement" Value="Bottom">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Left">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Right">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                                <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <DataTemplate DataType="{x:Type viewmodels:ObjectHexViewerViewModel}">
            <controls:ObjectHexViewer/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type viewmodels:FramesPreviewerViewModel}">
            <controls:FramesPreviewer HorizontalContentAlignment="Stretch" HorizontalAlignment="Stretch"/>
        </DataTemplate>
        <ControlTemplate x:Key="FramePreviewerScrollViewerTemplate" TargetType="{x:Type ScrollViewer}">
            <Grid x:Name="Grid" Background="{TemplateBinding Background}" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                <ScrollBar x:Name="PART_VerticalScrollBar"  AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                <ScrollBar x:Name="PART_HorizontalScrollBar" HorizontalAlignment="Right" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
            </Grid>
        </ControlTemplate>
    </UserControl.Resources>
    <Grid  VerticalAlignment="Stretch"  HorizontalAlignment="Stretch">
        <Grid.ColumnDefinitions>
            <ColumnDefinition  />
            <ColumnDefinition Width="24*"/>
            <ColumnDefinition  />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            <RowDefinition Height="4*"/>
            <RowDefinition />
        </Grid.RowDefinitions>
        <FrameworkElement x:Name="dataElement" Visibility="Collapsed"/>
        <Border  CornerRadius="6" Grid.Column="1"  BorderThickness="1" Background="#161616"   Grid.Row="1" >
            <Border.BorderBrush>
                <SolidColorBrush Color="#161616"/>
            </Border.BorderBrush>
            <Grid >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="3.0*" MaxWidth="1200" />
                    <ColumnDefinition Width="1.0*"  />
                </Grid.ColumnDefinitions>
                <DataGrid   SelectedItem="{Binding SelectedRow}"  VerticalScrollBarVisibility="Visible" Sorting="dgVolCur_Sorting"
                           RowHeaderWidth="0"
                          CanUserReorderColumns="False" 
                           AutoGenerateColumns="False" CanUserResizeColumns="False"
                          CanUserDeleteRows="False" CanUserAddRows="False"
                      HorizontalContentAlignment="Center"  ItemsSource="{Binding CurRows}" 
                      Style="{StaticResource VideoItemListDataGridStyle}" 
                          AlternationCount="2"
                      x:Name="dgVolCur"  FontSize="16px">
                    <DataGrid.Columns>
                        <DataGridTemplateColumn MinWidth="70" SortMemberPath="ItemID"  >
                            <DataGridTemplateColumn.Header >
                                <StackPanel Orientation="Horizontal">
                                    <CheckBox IsThreeState="True" IsChecked="{Binding DataContext.AllSelected,RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Margin="10,0,0,0" 
                                              VerticalAlignment="Center" Style="{StaticResource InnerViewItemListViewerCheckBoxStyle}" >
                                    </CheckBox>
                                </StackPanel>
                            </DataGridTemplateColumn.Header>
                            <DataGridTemplateColumn.HeaderStyle>
                                <Style TargetType="{x:Type DataGridColumnHeader}">
                                    <Setter Property="Foreground" Value="Black"/>
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="BorderBrush" >
                                        <Setter.Value>
                                            <SolidColorBrush Color="Black" Opacity="0.1"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Custom:ControlsHelper.ContentCharacterCasing" Value="Upper"/>
                                    <Setter Property="Cursor" Value="Hand"/>
                                    <Setter Property="FontFamily" Value="Microsoft YaHei"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                    <Setter Property="Margin" Value="0"/>
                                    <Setter Property="MinHeight" Value="21"/>
                                    <Setter Property="MinWidth" Value="0"/>
                                    <Setter Property="Padding" Value="7,0,0,0"/>
                                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Border x:Name="BackgroundBorder" BorderThickness="0,0,0,1"  BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2"/>
                                                    <Custom:ContentControlEx Background="Transparent" x:Name="HeaderContent" HorizontalAlignment="Left" 
                                                                             ContentCharacterCasing="{Binding (Custom:ControlsHelper.ContentCharacterCasing), RelativeSource={RelativeSource TemplatedParent}}" 
                                                                             ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{DynamicResource VideoItemListHeaderContentStyle}"/>
                                                    <Path x:Name="SortArrow" Grid.Column="1" Fill="Black" Height="10" Margin="0,0,8,2" RenderTransformOrigin="0.5,0.5" Stretch="Fill" Visibility="Collapsed" VerticalAlignment="Center" Width="8"/>
                                                    <Thumb x:Name="PART_LeftHeaderGripper" Width="0" Background="Transparent" HorizontalAlignment="Left" HorizontalContentAlignment="Left">
                                                        <Thumb.Style>
                                                            <Style TargetType="{x:Type Thumb}">
                                                                <Setter Property="Background" Value="Transparent"/>
                                                                <Setter Property="Cursor" Value="SizeWE"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                                                            <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                                                                                <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Width="2"/>
                                                                            </Border>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="Width" Value="0"/>
                                                            </Style>
                                                        </Thumb.Style>
                                                    </Thumb>
                                                    <Thumb x:Name="PART_RightHeaderGripper" Width="0" Grid.Column="1" HorizontalAlignment="Right" HorizontalContentAlignment="Right">
                                                        <Thumb.Style>
                                                            <Style TargetType="{x:Type Thumb}">
                                                                <Setter Property="Background" Value="{DynamicResource GrayBrush5}"/>
                                                                <Setter Property="Cursor" Value="SizeWE"/>
                                                                <Setter Property="Template">
                                                                    <Setter.Value>
                                                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                                                            <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                                                                                <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Width="0"/>
                                                                            </Border>
                                                                        </ControlTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter Property="Width" Value="8"/>
                                                            </Style>
                                                        </Thumb.Style>
                                                    </Thumb>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="SortDirection"  Value="Ascending">
                                                        <Setter Property="Data" TargetName="SortArrow" Value="F1M34,57L42,57 42,32.25 52,42.25 52,31.75 38,17.75 24,31.75 24,42.25 34,32.25 34,57z"/>
                                                        <Setter Property="Visibility" TargetName="SortArrow" Value="Visible"/>
                                                    </Trigger>
                                                    <Trigger Property="SortDirection" Value="Descending">
                                                        <Setter Property="Data" TargetName="SortArrow" Value="F1M42,19.0002L34,19.0002 34,43.7502 24,33.7502 24,44.2502 38,58.2502 52,44.2502 52,33.7502 42,43.7502 42,19.0002z"/>
                                                        <Setter Property="Margin" TargetName="SortArrow" Value="0,0,8,0"/>
                                                        <Setter Property="Visibility" TargetName="SortArrow" Value="Visible"/>
                                                    </Trigger>
                                                    <Trigger Property="DisplayIndex" Value="0">
                                                        <Setter Property="Visibility" TargetName="PART_LeftHeaderGripper" Value="Collapsed"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsMouseOver" Value="True"/>
                                                <Condition Property="SortDirection" Value="{x:Null}"/>
                                            </MultiTrigger.Conditions>
                                        </MultiTrigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTemplateColumn.HeaderStyle>
                            <DataGridTemplateColumn.CellStyle>
                                <Style TargetType="{x:Type DataGridCell}">
                                    <Setter Property="Custom:DataGridCellHelper.SelectionUnit" Value="{Binding (Custom:DataGridRowHelper.SelectionUnit), Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type DataGridRow}}}"/>
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                    <Setter Property="Padding" Value="0"/>
                                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                                    <!--<Setter Property="BorderBrush" >
                                        <Setter.Value>
                                            <SolidColorBrush Color="#d5d5d5" Opacity="0.45"/>
                                        </Setter.Value>
                                    </Setter>-->
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type DataGridCell}">
                                                <Border x:Name="CellBackgroundBorder" HorizontalAlignment="Left"  BorderBrush="{TemplateBinding BorderBrush}" 
                                                        BorderThickness="1,0,0,0" Padding="10,0,0,0"
                                            Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsSelected" Value="True">
                                                        <Setter Property="BorderBrush" Value="Transparent" TargetName="CellBackgroundBorder"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Foreground" Value="{DynamicResource MetroDataGrid.HighlightTextBrush}"/>

                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="Custom:DataGridCellHelper.IsCellOrRowHeader" Value="True"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
                                            <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.HighlightBrush}"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="Custom:DataGridCellHelper.IsCellOrRowHeader" Value="True"/>
                                                <Condition Property="IsKeyboardFocusWithin" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.FocusBorderBrush}"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsSelected" Value="True"/>
                                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Foreground" Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightTextBrush}"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="Custom:DataGridCellHelper.IsCellOrRowHeader" Value="True"/>
                                                <Condition Property="IsSelected" Value="True"/>
                                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
                                            <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.InactiveSelectionHighlightBrush}"/>
                                        </MultiTrigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="Custom:DataGridCellHelper.IsCellOrRowHeader" Value="True"/>
                                                <Condition Property="IsMouseOver" Value="True"/>
                                            </MultiTrigger.Conditions>
                                            <Setter Property="Background" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
                                            <Setter Property="BorderBrush" Value="{DynamicResource MetroDataGrid.MouseOverHighlightBrush}"/>
                                        </MultiTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTemplateColumn.CellStyle>
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Visibility="{Binding IsEmpty,Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=2}"
                                                Orientation="Horizontal">
                                        <CheckBox Content="{Binding ItemID}" VerticalAlignment="Center" Foreground="White"
									    IsChecked="{Binding IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                  Template="{DynamicResource VideoItemListViewerCheckBoxStyle}" />
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="通道号" MinWidth="80"
                                                Visibility="{Binding DataContext.IsChannelColVisible,Converter={StaticResource BoolToVisibilityConverter},Source={x:Reference dataElement}}"
                                                SortMemberPath="ChannelNO" IsReadOnly="True"  >
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Visibility="{Binding IsEmpty,Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=2}"
                                    Text="{Binding ChannelNO,Mode=OneWay,StringFormat={}{0:D2}}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>


                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="完整度" MinWidth="50"
                                Visibility="{Binding DataContext.IsStateColVisible,Converter={StaticResource BoolToVisibilityConverter},Source={x:Reference dataElement}}"
                             Width="*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Visibility="{Binding IsEmpty,Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=2}"
                                               Text="{Binding Path=Integrity,Converter={StaticResource VideoIntegrityToWordConverter}}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="文件大小" SortMemberPath="Size"
                              MinWidth="100" Width="0.7*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Visibility="{Binding IsEmpty,Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=2}"
                                        Text="{Binding Size,Mode=OneWay,Converter={StaticResource ByteSizeToSizeConverter}}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="开始时间" SortMemberPath="StartDate"
                              MinWidth="180" Width="0.7*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Visibility="{Binding IsEmpty,Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=2}"
                                        Text="{Binding StartDate,Mode=OneWay,Converter={StaticResource DateNumToDateStringConverter}}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="结束时间" SortMemberPath="EndDate"
                              MinWidth="180" Width="0.7*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Visibility="{Binding IsEmpty,Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=2}"
                                        Text="{Binding EndDate,Mode=OneWay,Converter={StaticResource DateNumToDateStringConverter}}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="文件位置" SortMemberPath="StartAddress"
                             MinWidth="80" Width="0.5*" >
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock  Visibility="{Binding IsEmpty,Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=2}"
                                        Text="{Binding StartAddress ,Mode=OneWay,Converter={StaticResource ByteSizeToGBSectorConverter}}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="后缀名"  MinWidth="80"
                            Width="0.5*" >
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock  Visibility="{Binding IsEmpty,Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=2}"
                                        Text="{Binding ExtensionName,Mode=OneWay}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="文件状态" MinWidth="80"
                                                Visibility="{Binding DataContext.IsStateColVisible,Converter={StaticResource BoolToVisibilityConverter},Source={x:Reference dataElement}}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Image Source="{Binding Path=Integrity,Converter={StaticResource VideoIntegrityToIconConverter}}">
                                        <Image.RenderTransform>
                                            <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="0.7" ScaleY="0.7">
                                                
                                            </ScaleTransform>
                                        </Image.RenderTransform>
                                    </Image>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
                <TabControl   Style="{DynamicResource VideoItemListViewerTabControlStyle}" MinWidth="300"
                              Grid.Column="1">
                    <TabItem  Style="{DynamicResource VideoItemListViewerTabItemTemplate}"   >
                        <TabItem.Header>
                            <TextBlock Text="缩略图"     />
                        </TabItem.Header>
                        <TabPanel HorizontalAlignment="Stretch" >
                            <Grid>
                                
                                    <ContentControl Content="{Binding FramesPreviewerViewModel}" HorizontalAlignment="Center" />
                                
                            </Grid>
                        </TabPanel>
                    </TabItem>
                    <TabItem  Header="十六进制" Style="{DynamicResource VideoItemListViewerTabItemTemplate}">
                        <TabPanel HorizontalAlignment="Stretch" >
                            <ContentControl Content="{Binding ObjectHexViewerViewModel}" Width="{Binding ActualWidth,RelativeSource={RelativeSource AncestorType={x:Type TabPanel}}}" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" />
                        </TabPanel>
                    </TabItem>
                    <TabItem Padding="0,6,0,0"  Header="详细信息" Style="{DynamicResource VideoItemListViewerFinalTabItemTemplate}">
                        <TabPanel>

                        </TabPanel>
                    </TabItem>
                </TabControl>
            </Grid>
        </Border>
    </Grid>
</UserControl>
